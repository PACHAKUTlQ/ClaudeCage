name: Build and Release ClaudeCage

on:
  push:
    branches:
      - main

jobs:
  build_and_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          # Install SUID bubblewrap (for the fallback) and zip (for archiving)
          sudo apt-get install -y bubblewrap zip
          echo "Dependencies installed."

      # --- NEW STEP: Unpack and Patch the RunImage script ---
      - name: Prepare Patched RunImage for Build
        run: |
          echo "Downloading RunImage for patching..."
          curl -# -Lo runimage https://github.com/VHSgunzo/runimage/releases/download/continuous/runimage-x86_64
          chmod +x runimage
          
          echo "Unpacking RunImage rootfs..."
          mkdir ./unpacked_rootfs
          # This is a robust way to extract to a specific directory
          (cd ./unpacked_rootfs && ../runimage --runtime-extract '*')

          echo "Patching Run.sh to disable AppArmor check..."
          # This sed command finds the specific 'if' statement and prepends a '#' to comment it out.
          # This surgically removes the faulty check.
          sed -i 's|if \[ -f /sys/module/apparmor/parameters/restrict_unprivileged_userns \]; then|# &|' ./unpacked_rootfs/var/RunDir/Run.sh
          
          echo "RunImage is patched and ready for the build process."

      # --- MODIFIED STEP: Run build.sh using the patched rootfs ---
      - name: Run Build Script
        run: |
          echo "Running build.sh using the patched rootfs and SUID bwrap..."
          chmod +x ./build.sh

          # This is the core of the fix:
          # 1. RIM_ROOTFS points to our patched, unpacked filesystem.
          # 2. RIM_SYS_BWRAP=1 enables the SUID fallback.
          # 3. We use the *original* 'runimage' binary as the engine.
          env \
            RIM_ROOTFS=$(pwd)/unpacked_rootfs \
            RIM_SYS_BWRAP=1 \
            ./runimage ./build.sh

          echo "build.sh completed."

      - name: Verify output files exist
        run: |
          echo "Verifying output files..."
          ls -l ClaudeCage ClaudeCage.rcfg
          test -f ClaudeCage
          test -f ClaudeCage.rcfg
          echo "Output files verified."

      - name: Create release archive
        run: |
          echo "Creating ClaudeCage_release.zip..."
          zip ClaudeCage_release.zip ClaudeCage ClaudeCage.rcfg
          echo "ClaudeCage_release.zip created."

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: build-${{ github.run_id }}-${{ github.sha_short }}
          name: Automated Build ${{ github.run_id }} (Commit ${{ github.sha_short }})
          body: |
            This is an automated build from commit `${{ github.sha_short }}` on branch `${{ github.ref_name }}`.

            [View Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

            The attached `ClaudeCage_release.zip` contains the `ClaudeCage` executable and `ClaudeCage.rcfg` configuration file.
          files: ClaudeCage_release.zip
