name: Build and Release ClaudeCage

on:
  push:
    branches:
      - main

jobs:
  build_and_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bubblewrap zip
          echo "Dependencies installed."

      # --- FINAL, VINDICATED STEP: Deconstruct, Patch, and Reconstruct RunImage ---
      - name: Prepare Patched RunImage for Build
        run: |
          echo "Downloading RunImage..."
          curl -# -Lo runimage https://github.com/VHSgunzo/runimage/releases/download/continuous/runimage-x86_64
          chmod +x runimage

          echo "Deconstructing the original RunImage..."
          OFFSET=$(./runimage --runtime-offset)
          dd if=runimage of=runtime bs=1 count=$(($OFFSET - 1))
          dd if=runimage of=fs_and_config.img bs=1 skip=$(($OFFSET - 1))
          
          echo "Ensuring filesystem is a usable SquashFS image..."
          # We test if the image is SquashFS first.
          if ./runimage --runtime-unsquashfs -s fs_and_config.img &>/dev/null; then
              echo "Filesystem is already SquashFS."
          else
              echo "Filesystem is DwarFS. Converting to SquashFS..."
              mkdir ./temp_dwarfs_unpacked
              ./runimage --runtime-dwarfsextract -i fs_and_config.img -o ./temp_dwarfs_unpacked
              DWARFS_CONTENT_PATH="./temp_dwarfs_unpacked/rootfs"
              if [ ! -d "$DWARFS_CONTENT_PATH/var" ]; then
                echo "FATAL: Dwarfs extraction failed to produce the expected 'rootfs' subdirectory."
                exit 1
              fi
              ./runimage --runtime-mksquashfs "$DWARFS_CONTENT_PATH" fs_and_config.img -no-xattrs -noappend
              rm -rf ./temp_dwarfs_unpacked
          fi
          
          # Now that we are GUARANTEED to have a SquashFS image, unpack it.
          # We create a clean directory to unpack into.
          mkdir ./rootfs_content
          echo "Unpacking final SquashFS image into ./rootfs_content..."
          ./runimage --runtime-unsquashfs -f -d ./rootfs_content fs_and_config.img

          # --- THIS IS THE FINAL, TRUE FIX ---
          # The logs have proven that the files are unpacked directly into the destination.
          # The path to the content IS the destination directory itself.
          EXTRACTED_ROOT_PATH="./rootfs_content"

          echo "Verifying final extraction at $EXTRACTED_ROOT_PATH..."
          if [ ! -d "$EXTRACTED_ROOT_PATH/var/RunDir" ]; then
              echo "FATAL: Final extraction failed. /var/RunDir not found in $EXTRACTED_ROOT_PATH"
              ls -lR "$EXTRACTED_ROOT_PATH"
              exit 1
          fi
          echo "Verification successful. Run.sh path found."
          
          PATCH_TARGET_FILE="$EXTRACTED_ROOT_PATH/var/RunDir/Run.sh"

          echo "Patching $PATCH_TARGET_FILE..."
          sed -i 's|if \[ -f /sys/module/apparmor/parameters/restrict_unprivileged_userns \]; then|# &|' "$PATCH_TARGET_FILE"
          
          echo "Re-packing the patched rootfs from $EXTRACTED_ROOT_PATH..."
          ./runimage --runtime-mksquashfs "$EXTRACTED_ROOT_PATH" fs_patched.img -no-xattrs -noappend

          echo "Re-assembling the patched RunImage..."
          grep -a --binary-files=text -o '{.*}$' fs_and_config.img > config.json
          cat runtime fs_patched.img config.json > runimage_patched
          chmod +x runimage_patched

          echo "Patched RunImage created successfully."

      - name: Run Build Script
        run: |
          echo "Running build.sh using the patched executable and SUID bwrap..."
          chmod +x ./build.sh
          env \
            RIM_SYS_BWRAP=1 \
            ./runimage_patched ./build.sh
          echo "build.sh completed."

      - name: Verify output files exist
        run: |
          echo "Verifying output files..."
          ls -l ClaudeCage ClaudeCage.rcfg
          test -f ClaudeCage
          test -f ClaudeCage.rcfg
          echo "Output files verified."

      - name: Create release archive
        run: |
          echo "Creating ClaudeCage_release.zip..."
          zip ClaudeCage_release.zip ClaudeCage ClaudeCage.rcfg
          echo "ClaudeCage_release.zip created."

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: build-${{ github.run_id }}-${{ github.sha_short }}
          name: Automated Build ${{ github.run_id }} (Commit ${{ github.sha_short }})
          body: |
            This is an automated build from commit `${{ github.sha_short }}` on branch `${{ github.ref_name }}`.
            [View Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            The attached `ClaudeCage_release.zip` contains the `ClaudeCage` executable and `ClaudeCage.rcfg` configuration file.
          files: ClaudeCage_release.zip
