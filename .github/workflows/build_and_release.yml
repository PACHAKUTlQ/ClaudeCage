name: Build and Release ClaudeCage

on:
  push:
    branches:
      - main

jobs:
  build_and_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SUID Bubblewrap
        run: |
          sudo apt-get update
          sudo apt-get install -y bubblewrap
          echo "bubblewrap installed."

      # --- MODIFIED STEP: Run build.sh inside a minimal 'blinding' sandbox ---
      - name: Make build.sh executable and run it
        run: |
          echo "Running build.sh inside a wrapper sandbox to bypass AppArmor check..."
          chmod +x ./build.sh

          # This is the core of the fix:
          # 1. We use the system's 'bwrap' to create an outer sandbox.
          # 2. '--share-net': The build process needs network access.
          # 3. '--dev-bind / /': Give the sandbox access to the host's entire filesystem.
          # 4. '--tmpfs /sys':  THIS IS THE TRICK. It mounts an empty, temporary
          #    filesystem over /sys, hiding the AppArmor parameter file from RunImage.
          # 5. 'env RIM_SYS_BWRAP=1 ./build.sh': We run our script with the
          #    environment variable that tells the *inner* RunImage to use the SUID
          #    fallback once it gets past its faulty check.
          bwrap \
            --share-net \
            --dev-bind / / \
            --proc /proc \
            --dev /dev \
            --tmpfs /sys \
            env RIM_SYS_BWRAP=1 ./build.sh
            
          echo "build.sh completed."

      - name: Verify output files exist
        run: |
          echo "Verifying output files..."
          ls -l ClaudeCage ClaudeCage.rcfg
          test -f ClaudeCage
          test -f ClaudeCage.rcfg
          echo "Output files verified."

      - name: Create release archive
        run: |
          echo "Creating ClaudeCage_release.zip..."
          zip ClaudeCage_release.zip ClaudeCage ClaudeCage.rcfg
          echo "ClaudeCage_release.zip created."

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: build-${{ github.run_id }}-${{ github.sha_short }}
          name: Automated Build ${{ github.run_id }} (Commit ${{ github.sha_short }})
          body: |
            This is an automated build from commit `${{ github.sha_short }}` on branch `${{ github.ref_name }}`.

            [View Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

            The attached `ClaudeCage_release.zip` contains the `ClaudeCage` executable and `ClaudeCage.rcfg` configuration file.
          files: ClaudeCage_release.zip
